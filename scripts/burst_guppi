#! /usr/bin/python
"""Search guppi files for fast radio bursts.
"""

import time
import argparse
from os import path
import logging
import glob
import cProfile, pstats, StringIO

import numpy as np
import h5py

logger = logging.getLogger(__name__)
#logger.setLevel(logging.INFO)
#logger.addHandler(logging.StreamHandler())

logging.basicConfig(level=logging.INFO)

try:
    from mpi4py import MPI
    mpi_size = MPI.COMM_WORLD.Get_size()
    mpi_rank = MPI.COMM_WORLD.Get_rank()
    logger.info("MPI available. Process size is %d. My rank is %d."
                % (mpi_size, mpi_rank))
except ImportError:
    mpi_size = 1
    mpi_rank = 0
    logger.info("MPI not available.")


# Command line arguments.
parser = argparse.ArgumentParser(description='Search GUPPI data for FRBs.')
parser.add_argument(
        "files",
        metavar="GUPPI_files",
        type=str,
        nargs='+',
        help="GUPPI PSRFITS files to search.",
        )
parser.add_argument(
        '-p', '--show_plot',
        type=bool,
        default=False
        )
parser.add_argument(
        '--disp_ind_search',
        type=float,
        default=None,
        nargs=3,
        metavar=('min', 'max', 'ntrail'),
        help="Dispersion index search parameters (eg. '1. 5. 4')"
        )
parser.add_argument(
        '--spec_ind_search',
        type=float,
        default=None,
        nargs=3,
        metavar=('min', 'max', 'ntrail'),
        help="Spectral index search parameters (eg. '-5. 5. 3')"
        )
parser.add_argument(
        '--max_dm',
        type=float,
        default=2000.0
        )
parser.add_argument(
        '--simulate',
        type=float,
        default=None,
        nargs=2,
        metavar=('rate', 'max_fluence'),
        help="Simulation parameters. Specify both an average rate "
        "(per second) and max fluence (in units T_sys seconds). "
        " Eg. '0.01 0.0001'."
        )
parser.add_argument(
        '--scrunch',
        action='store_true',
        default=False,
        help="Use scrunching to achieve max DM."
        )
parser.add_argument(
        '--profile',
        action='store_true',
        default=False,
        )


if __name__ == "__main__":
    args = parser.parse_args()
    prof = args.profile

    if not args.show_plot:
        # Configure matplotlib to not need X.
        import matplotlib as mpl
        mpl.use('Agg')

    # Must be imported after choosing mpl backend.
    from burst_search import guppi

    files = args.files
    if len(files) == 1:
        files = glob.glob(files[0])

    if mpi_size > 1:
        files = sorted(files)
    else:
        files = files

    search_pars = {}
    if args.disp_ind_search is not None:
        search_pars['disp_ind_search'] = True
        search_pars['disp_ind_min'] =  args.disp_ind_search[0]
        search_pars['disp_ind_max'] =  args.disp_ind_search[1]
        search_pars['disp_ind_samples'] = int(args.disp_ind_search[2])
    if args.spec_ind_search is not None:
        search_pars['spec_ind_search'] = True
        search_pars['spec_ind_min'] =  args.spec_ind_search[0]
        search_pars['spec_ind_max'] =  args.spec_ind_search[1]
        search_pars['spec_ind_samples'] = int(args.spec_ind_search[2])
    if args.simulate is not None:
        search_pars["simulate"] = True
        search_pars["simulate_rate"] = args.simulate[0]
        search_pars["simulate_fluence"] = args.simulate[1]
    if args.scrunch:
        search_pars["max_dm"] = -1.9
        search_pars["scrunch"] = 1
    else:
        search_pars["max_dm"] = args.max_dm

    for filename in files[mpi_rank::mpi_size]:
        logger.info("Rank %d, file %s." % (mpi_rank, filename))
        while True:
            try:
                Searcher = guppi.Manager(filename, **dict(search_pars))
            except IOError as e:
                logging.error("Rank %d, file can't be opened %s."
                        % (mpi_rank, filename))
                continue

            act_str = 'save_plot_dm,print,save_dm_npy' 
            if args.show_plot:
                act_str = act_str + ',show_plot_dm'
            logger.info('Doing actions: %s' % act_str)
            Searcher.set_trigger_action(act_str)

            if prof:
                pr = cProfile.Profile()
                pr.enable()

            Searcher.process_all()

            if prof:
                pr.disable()
                s = StringIO.StringIO()
                sortby = 'cumulative'
                ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
                ps.print_stats()
                print '\n'.join(s.getvalue().split('\n')[:200])
                #out_file.close()

            if Searcher.max_dm >= args.max_dm:
                break
            else:
                search_pars["min_search_dm"] = Searcher.max_dm
                search_pars["scrunch"] *= 2

