#! /usr/bin/python
"""Search guppi files for fast radio bursts.

"""

import time
import argparse
from os import path
import logging


import numpy as np
import h5py

from burst_search import guppi


import cProfile, pstats, StringIO


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler())


try:
    from mpi4py import MPI
    mpi_size = MPI.COMM_WORLD.Get_size()
    mpi_rank = MPI.COMM_WORLD.Get_rank()
    logger.info("MPI available. Process size is %d. My rank is %d."
                % (mpi_size, mpi_rank))
except ImportError:
    mpi_size = 1
    mpi_rank = 0
    logger.info("MPI not available.")


# Command line arguments.
parser = argparse.ArgumentParser(description='Search GUPPI data for FRBs.')
parser.add_argument(
        "files",
        metavar="GUPPI_files",
        type=str,
        nargs='+',
        help="GUPPI PSRFITS files to search.",
        )
parser.add_argument(
        '-c', '--cal-spec-file',
        help=('.npy file containing the noise-cal spectrum for bandpass'
              ' calibration.'),
        )
parser.add_argument(
        '-p', '--show_plot',
        type=bool,
        default=False
        )
parser.add_argument(
        '--disp_ind',
        type=float,
        default=None
        )
parser.add_argument(
        '--disp_search',
        type=float,
        default=None,
        nargs=3
        )
parser.add_argument(
        '--max_dm',
        type=float,
        default=2000.0
        )
parser.add_argument(
        '--sim',
        action='store_true',
        default=False,
        )
parser.add_argument(
        '--profile',
        action='store_true',
        default=False,
        )



if __name__ == "__main__":
    args = parser.parse_args()
    prof = args.profile

    if args.cal_spec_file:
        cal_spec = np.load(args.cal_spec_file)
    else:
        cal_spec = None
	
    files = args.files
    if len(files) == 1:
	files = glob.glob(files[0])

    if mpi_size > 1:
        files = sorted(files)
    else:
        files = files

    for filename in files[mpi_rank::mpi_size]:
        print "Rank %d, file %s." % (mpi_rank, filename)
        try:
            if args.disp_search == None and not args.disp_ind == None:
                Searcher = guppi.FileSearch(filename,disp_ind=args.disp_ind,
                max_dm=args.max_dm,sim=args.sim)
            elif args.disp_search != None:
                print args.disp_search
                disp_min, disp_max, disp_num = args.disp_search
                Searcher = guppi.FileSearch(filename,disp_ind=disp_min,
                    disp_max = disp_max, disp_ind_samples=int(disp_num),
                    max_dm=args.max_dm,sim=args.sim)
            else:
                Searcher = guppi.FileSearch(filename,sim=args.sim)

        except IOError as e:
	    print "Rank %d, file can't be opened %s." % (mpi_rank, filename)
            continue
        if not cal_spec is None:
            Searcher.set_cal_spectrum(cal_spec)

        act_str = 'save_plot_dm,print'
        if args.show_plot:
            act_str = act_str + ', show_plot_dm'
        print 'doing actions \n' + act_str
        Searcher.set_trigger_action(act_str)
        #Searcher.set_trigger_action('print')

        # To write dedispered data to disk.
        #out_filename = path.splitext(path.basename(filename))[0] + ".h5"
        #out_file = h5py.File(out_filename)
        #Searcher.set_dedispersed_h5(out_file)
        if prof:
            pr = cProfile.Profile()
            pr.enable()

        Searcher.search_all_records()

        if prof:
            pr.disable()
            s = StringIO.StringIO()
            sortby = 'cumulative'
            ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
            ps.print_stats()
            print '\n'.join(s.getvalue().split('\n')[:200])
            #out_file.close()

